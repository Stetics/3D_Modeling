rom PIL import ImageDraw, Image
import numpy as np
from IPython.display import display

# Создаем изображения
im = Image.new("RGB", (640, 480))
im1 = Image.new("RGB", (640, 480))
draw = ImageDraw.Draw(im)
draw2 = ImageDraw.Draw(im1)
draw.polygon((200, 50, 250, 100, 200, 150, 100, 150, 50, 100, 100, 50), outline=255)
draw2.polygon((200, 50, 250, 100, 200, 150, 100, 150, 50, 100, 100, 50), outline=255)
vertices = [[200, 50], [250, 100], [200, 150], [100, 150], [50, 100], [100, 50]]
n = 6

def CyrusBeckLineClipping(x1, y1, x2, y2):
    normal = [[0, 0] for _ in range(n)]

    # Вычисляем нормали к сторонам многоугольника
    for i in range(n):
        normal[i][1] = vertices[(i + 1) % n][0] - vertices[i][0]
        normal[i][0] = vertices[i][1] - vertices[(i + 1) % n][1]

    # Вычисляем направляющий вектор отрезка
    dx = x2 - x1
    dy = y2 - y1
    dp1e = [[vertices[i][0] - x1, vertices[i][1] - y1] for i in range(n)]

    numerator = [normal[i][0] * dp1e[i][0] + normal[i][1] * dp1e[i][1] for i in range(n)]
    denominator = [normal[i][0] * dx + normal[i][1] * dy for i in range(n)]

    # Вычисляем параметры t для точек пересечения
    t = [numerator[i] / denominator[i] if denominator[i] != 0 else float('inf') for i in range(n)]

    # Определяем параметры входа и выхода
    tE, tL = 0.0, 1.0
    for i in range(n):
        if denominator[i] > 0:
            tE = max(tE, t[i])
        elif denominator[i] < 0:
            tL = min(tL, t[i])

    if tE > tL:
        return  # Нет видимой части отрезка

    # Вычисляем координаты точек пересечения
    new_x1 = x1 + dx * tE
    new_y1 = y1 + dy * tE
    new_x2 = x1 + dx * tL
    new_y2 = y1 + dy * tL
    draw2.line((new_x1, new_y1, new_x2, new_y2), fill=(0, 255, 0))

def clippingProcess(x1, y1, x2, y2):
    draw.line((x1, y1, x2, y2), fill=(0, 255, 0))
    CyrusBeckLineClipping(x1, y1, x2, y2)

# Задаем координаты линии
x1, y1, x2, y2 = 10, 10, 450, 450
clippingProcess(x1, y1, x2, y2)

# Отображаем изображения
display(im)
display(im1)
